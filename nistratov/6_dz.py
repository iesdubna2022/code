import numpy as np #тк я не нашел никакого другого способа, я решил, что проще будет разобрать способ ребят, тем более нельзя использовать sympy. Первая строка это импортировать NumPy под именем np 

def f(x): #создаем ф-цию f(x), куда запишем наше выражение, для дальнейших вычислений
    return ((np.sin(x))**2) * np.sin(x**2) * np.exp(-(x**2)) #здесь мы записываем наше выражение, которое нам нужно проинтегрировать, np.что-то:sin/cos/и_тд необходимо, чтобы библиотека numpy работала 

def Integral(func, lower, upper, numOfSegm) -> float: #объявляем нашу ф-цию, где Integral() - это имя ф-ции,func - выражение, которое нужно проинтегрировать, numOfSegm -  начальное число отрезков разбиения,  -> float - тут уже тип данных, lower, upper - можно сказать, что 'радиус' от и до     
    step = ((upper-lower)*1.) / numOfSegm  #здесь формула из книжи =)
    x = np.arange(lower, upper, step) #Создать вектор со значениями lower, upper, step
    x = np.array(x+(step*1.)/2) #Преобразовать вектор чисел в матрицу бинарных представлений
    x = np.array(func(x)) #Преобразовать вектор чисел в матрицу бинарных представлений
    z = np.array(step*x) #Преобразовать вектор чисел в матрицу бинарных представлений
    return z.sum() #вернуть z.sum(), ну а точнее, сумму значений матрицы z

print(Integral(f, 0, 3, 1_000_000))

#скорее всего дал кривые и нелепые комментарии, но честно не успел бы сделать ничего лучше 